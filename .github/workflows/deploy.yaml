name: Deploy NodeJS on EC2 with Terraform
on:
  push:
    branches:
      - master
env:
  AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
  AWS_SECRET_KEY_ID: ${{secrets.AWS_SECRET_KEY_ID}}
  AWS_SSH_KEY_PUBLIC: ${{secrets.AWS_SSH_KEY_PUBLIC}}
  AWS_SSH_KEY_PVT: ${{secrets.AWS_SSH_KEY_PVT}}
  AWS_TF_STATE_BUCKET_NAME: ${{secrets.AWS_TF_STATE_BUCKET_NAME}}
  AWS_REGION: ap-south-1
jobs:
  deploy-infra:
    runs-on: ubuntu-latest
    outputs:
      SERVER_PUBLIC_IP: ${{steps.set-ip.outputs.instance_public_ip}}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false
      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ./infrastructure/terraform
      - name: Terraform Plan
        id: plan
        run: terraform plan -var="access_key=$AWS_ACCESS_KEY_ID" -var="secret_key=$AWS_SECRET_KEY_ID" -var="region=ap-south-1" -var="public_key=$AWS_SSH_KEY_PUBLIC" -var="private_key=$AWS_SSH_KEY_PVT" -var="key_name=deployer-key" -out=PLAN
        working-directory: ./infrastructure/terraform
      - name: Terraform Apply
        id: apply
        run: terraform apply PLAN
        working-directory: ./infrastructure/terraform
      - name: Set outputs
        id: set-ip
        run: echo "::set-output name=instance_public_ip::$(terraform output instance_public_ip)"
  deploy-app:
    runs-on: ubuntu-latest
    needs: deploy-infra
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2 # More information on this action can be found below in the 'AWS Credentials' section
        with:
          aws-access-key-id: ${{env.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{env.AWS_SECRET_KEY_ID}}
          aws-region: ${{env.AWS_REGION}}
      - name: Set IP as env
        run: echo SERVER_PUBLIC_IP=${{needs.deploy-infra.outputs.SERVER_PUBLIC_IP}} >> $GITHUB_ENV
      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build and push docker image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: node-app
          IMAGE_TAG: ${{github.sha}}
          AWS_DEFAULT_REGION: ap-south-1
        run: |-
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        working-directory: ./server
      - name: Deploy docker image to EC2
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: node-app
          IMAGE_TAG: ${{github.sha}}
          AWS_DEFAULT_REGION: ap-south-1
        uses: appleboy/ssh-action@master
        with:
          host: ${{env.SERVER_PUBLIC_IP}}
          username: ubuntu
          key: ${{env.AWS_SSH_KEY_PVT}}
          port: 22
          envs: AWS_SSH_KEY_PVT,REGISTRY,REPOSITORY,IMAGE_TAG,AWS_ACCESS_KEY_ID,AWS_SECRET_KEY_ID,AWS_REGION,AWS_DEFAULT_REGION
          script: |-
            sudo apt update
            sudo apt install docker.io -y
            sudo apt install awscli -y
            sudo $(aws ecr get-login --no-include-email --region ap-south-1);
            sudo docker stop myappcontainer || true
            sudo docker rm myappcontainer || true
            sudo docker pull $REGISTRY/$REPOSITORY:$IMAGE_TAG
            sudo docker run -d --name myappcontainer -p 80:8080 $REGISTRY/$REPOSITORY:$IMAGE_TAG
